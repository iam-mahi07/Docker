INTERVIEW QUESTIONS

1) What is docker mainly useful for and why?
A: Docker is a containerization tool which reduces the setup of all dependencies to deploy an application instead here we pack all the dependencies as an image and we run the image to deploy the application. With the help of docker we can implement the microservices architecture deployment of an application where in case any particular service fails or any bug is found instead of stopping the entire production server that has all the microservices we can just stop that one particular container that has issue and can the remaining can run uninterruptedly. 
2) What are the components of a docker?
A: The components of a docker are docker client, docker host and docker registry. Docker client is the CLI used to interact with the Docker Daemon or in simple words, where we write the docker commands, docker host is the machine where docker is installed and docker registry is the hub or place where we can store and pull the images from. 
3) What is Docker Daemon and what is exactly does?
A: Docker Daemon is a service that runs in the background of the Docker which is responsible for creating containers, running and managing containers. It’s the engine of the docker that carries all the operations and requests that are related to Docker.  
4) What is dockerfile and why is it useful or needed?
A: A dockerfile is a text file that has set of instructions which helps to automate the image creation. In Dockerfile “D” should always be in uppercase and the start components in the file should be in uppercase.
5) How to create a container and go inside the container?
A: To create a container we first need an image and in case if there’s no image it pulls from the docker registry and then creates a container as shown below.
To create a container: docker run -it --name container-name image-name
To go inside the container: docker attach container-name. 
If you create a new container you directly go inside the container but if a container is already created and stopped/exited then if you want to go then you need to use the command “docker attach container-name”. 
6) How do you move the code or files from one container to another container or to run the same application of one container in another container?
A: First we need to create a container (cont-1), then create an image from the container and at last now if you run the image or in other words create a new container (cont-2) with the created image of first container (cont-1) then you get all files. 
i) docker run -it --name cont-name (cont-1) image-name (mahi.jpg) - - > Container is created. 
ii) docker commit cont-name (cont-1) image-name - - > An image is created from the container. 
iii) docker run -it --name mahi.jpg  - - > A container is created with the image created from the first container. 
7) How to reduce the size of a docker image?
A: The size of the docker image can be reduced with the help of a multi stage build and also with the help of Distroless images. 
A multi stage build is a process which includes multiple stages in a single Dockerfile where we have multiple FROM components in the Dockerfile. Each FROM begins a new stage for the build, you can selectively copy the artifacts from one stage to another, leaving behind everything that you don’t want in the final image, that eventually reduces the size of the image. 
Ex: https://docs.docker.com/build/building/multi-stage/
A distroless image contain only your application and it’s runtime dependencies, they don’t contain any package managers, shells or any other programs you’d expect to find it in a standard Linux distribution. Like if you install ubuntu, you get wget, curl, apt, ls and grep and this occupy the size in the image and distroless images doesn’t contain all these things. The distroless images are the ones which is very small in size and provides high security which is less prone to attack by the hackers. 
https://github.com/GoogleContainerTools/distroless?tab=readme-ov-file
8) What are the challenges that you faced in real time while using docker?
A: The size of the image used to be very huge in size which used to eat a lot of memory so I’ve learnt about the distroless images and multi-stage build and that really helped a lot in terms of security, size and overall performance as well. 
9) How do you check the container name or ID associated to an image or how to find out a container name or ID if you only have image name?
A: If you want to limit your search to only running containers “docker ps --filter ancestor=image-name” and if you want to include your search in the list of running and stopped containers then you can use “docker ps -a --filter ancestor=image-name ”. 
The list of docker images.
Using grep to find the container name using an image. 
Using --filter and ancestor. 
10) How do you expose an application inside the docker container to make it available to the public?
A: In order to expose the application inside the docker container to access we need to publish a port number while creating a container itself and you can’t do it for running containers. 
docker run -itd --name cont-name -p hostport:containerport image-name
11) What are the components of a Dockerfile?
A: The below are the components of a Dockerfile.
FROM: It is used to define the image name. 
LABEL: It is used to define the author name. 
COPY: It is used to copy the files from local to container. 
ADD: It also does the same as COPY but in addition to that it also downloads the internet objects. 
Ex: ADD URL destination
RUN: It is used to perform any command during the build.
CMD: It is used to perform a command during the run time which means while running the image build by dockerfile or while creating a container. 
ENTRYPOINT: It is used to pass the values in run time and has high priority than CMD. 
WORKDIR: It is used to create a folder inside the default path of the container ( / ) and as soon as the container is built it goes into that path directly without / 
ARG: It is used to pass the variables and it overwrites the values that were previously mentioned in the ARG and can be passed during the run time.
ENV: It can’t be passed during the run time and it doesn’t overwrite. 
EXPOSE: It is a component which is used to listen the incoming requests on the port 80, let’s say we’ve a web server httpd it works on port 80 and if we mention expose 80 that means the requests goes to web servers in this way useful and it doesn’t publish any port it is useful only for documentation purpose. 
12) What are the different ways to create a volume, mount a volume?
A: You can create a volume individually with a command, a dockerfile and also you while creating a new container as well.
i) docker volume create volume-name
ii) docker run -itd --name cont-name -v /vol-name image-name

MOUNTING A VOLUME: 
Let’s say you’ve a volume that has some code or files in local and if you want to attach it to a container then you can do it by using the following command.
docker run -itd --name cont-name --mount source=vol-name (in local),destination=/new-vol-name inside the container image-name
Another way is you can mount a 

13) How data replication is possible or implemented in docker?
A: Data replication is possible in docker with the help of docker volumes. 
If we’ve two containers cont-1 and cont-2, in cont-1 we have like 10 files and if you create an image from cont-1 and then create a new container from created image then we get all the data from cont-1 but if any data is deleted or added we don’t get to see those changes and these changes can be replicated only when a volume is attached.
If we first create a container-1 with volume and if an image is created from container-1 and if we run the created image a container-2 gets created, we get all files from cont-1 to cont-2, but we don’t get the data in the volume. 
i) Created a cont-1 along with volume.
ii) Go inside the container and you can see the volume (my-vol) has been created. 
iii) Three files have been created inside the container i.e. container files. 
iv) Also a 5 files have been created inside the volume as well.
v) An image is created with image:1 from container-1. 
vi) A container is created from image:1 and you got the container files into the cont-2. 
vii) However, you haven’t got any files inside the volume. This is conclusion of the demonstration that if a container is created from the image of a container that has files inside the container and volume, so the newly container gets only the files inside the container and not the files inside the volume. 
“VOLUME WILL NOT BE INCLUDED WHEN IMAGE IS UPDATED”. 
Here we’ve “updated the ubuntu image of cont-1 to image:1 of our choice from cont-1 to use the image to create another container”. 

SHARING A VOLUME: 
Let’s say we’ve a volume attached to cont-1 and  if we create an image from cont-1 and run to create cont-2, then we get the files inside the container and we don’t get the files inside the volume. 
To get those, that volume needs to be shared to another new creating container so we can get all the files directly, to do that we need to use a command. 
docker run -itd --name cont-2 --privileged=true --volumes-from cont-1 ubuntu
i) Created a container with volume.
ii) Go inside the container and you can find the created volume(MY-VOLUME) and there are no files.
iii) Now a few files are created and came out of the container with ctrl PQ.
iv) Created another container-2 with sharing the volume of cont-1. 
v) Here you can find the files that were in cont-1 are reflecting in cont-2 as well. And also created 5 more files with name new. 
vi) Now go inside the container-1 and you can find the 5 new files that are created in cont-2 will be there in cont-1 as well. That’s how “the data replication is possible with the docker volume concept”. 

DATA REPLICATION FROM HOST TO CONTAINER:
If you’ve your source code in your local machine in a folder and if you want to use the data with a container to deploy the code. Then you need to mention the path where you’ve the source code in the source section and in the destination section mention the path with a volume-name that gets created inside the container. So that the the data in the local is shared to a container with the help of volume for deployment.
docker run -itd --name cont-name -v path of the folder:/vol-name --privileged=true image-name
14) What is Docker Swarm and how it’s useful?
A: Docker swarm is an orchestration service which is an alternate for Kubernetes though it doesn’t have the advantages like K8s does but it is also used in companies. It is used to manage and handle multiple containers on multiple servers at the same time. All it does is, it implements a cluster where it has a Swarm manager, workers, in it and the manager assigns the work to worker nodes to do. Let’s say we take the source code from the developers through github we clone it if needed, we write a dockerfile, push the image to the dockerhub and we create a service in docker swarm it creates a container and the application runs in it. In case if the container gets deleted, the “replication mode” feature in docker swarm creates container in either worker nodes or manager nodes based on the current count of running containers and also you can scale up or scale down and this mode works as a Auto Scaling group as well. This is the main advantage of Docker swarm. 
You can implement with installing docker on manager and nodes and then initialize it using the below command: 
docker swarm init --advertise-addr private IP of manager
15) What is Docker compose and how it is useful?
A: Docker compose is used to build, run and handle multiple containers in a single server at the same time with the help of a YAML file. We use compose yaml file to pass the parameters where it automates the creation of containers, volumes, networks etc. We can just execute the compose file to create them and you’ll use the command docker-compose up -d and if you want to down you can use docker-compose down -d, it will down the service and it will also delete the running containers and which eventually stops the availability of application. 
